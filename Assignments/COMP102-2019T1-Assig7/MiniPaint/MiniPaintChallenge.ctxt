#BlueJ class context
comment0.target=MiniPaintChallenge
comment1.params=
comment1.target=void\ doSetLine()
comment1.text=Respond\ to\ the\ Line\ button
comment10.params=polySides
comment10.target=void\ doSetPolySides(double)
comment11.params=
comment11.target=void\ doSetErase()
comment12.params=action\ x\ y
comment12.target=void\ doMouse(java.lang.String,\ double,\ double)
comment12.text=\n\ Respond\ to\ mouse\ events\n\ When\ pressed,\ remember\ the\ position.\n\ When\ released,\ draw\ what\ is\ specified\ by\ current\ shape\n\ Uses\ the\ value\ stored\ in\ the\ field\ to\ determine\ which\ kind\ of\ shape\ to\ draw.\n\ \ It\ should\ call\ the\ drawALine,\ drawARectangle,\ drawAnOval,\ or\ drawAnImage,\ methods\n\ \ passing\ the\ x\ and\ y\ where\ the\ mouse\ was\ released.\n
comment13.params=x\ y
comment13.target=void\ drawALine(double,\ double)
comment13.text=\n\ Draw\ a\ line\ between\ the\ mouse\ pressed\ and\ mouse\ released\ points.\n\ x\ and\ y\ are\ the\ position\ the\ mouse\ was\ released.\n
comment14.params=x\ y
comment14.target=void\ drawRBLine(double,\ double)
comment15.params=x\ y
comment15.target=void\ drawARectangle(double,\ double)
comment15.text=\n\ Draw\ a\ rectangle\ between\ the\ mouse\ pressed\ and\ mouse\ released\ points.\n\ x\ and\ y\ are\ the\ position\ the\ mouse\ was\ released.\n\ Works\ out\ the\ left,\ top,\ width,\ and\ height\ from\ x,\ y,\ lastX\ and\ lastY\n\ Then\ draws\ the\ rectangle,\ filled\ or\ outline,\ depending\ on\ the\ fill\ field.\n
comment16.params=x\ y
comment16.target=void\ drawAnOval(double,\ double)
comment16.text=\n\ Draw\ an\ oval\ between\ the\ mouse\ pressed\ and\ mouse\ released\ points.\n\ x\ and\ y\ are\ the\ position\ the\ mouse\ was\ released.\n\ Works\ out\ the\ left,\ top,\ width,\ and\ height\ from\ x,\ y,\ lastX\ and\ lastY\n\ Then\ draws\ the\ oval,\ filled\ or\ outline,\ depending\ on\ the\ fill\ field.\n
comment17.params=xPoints\ yPoints\ nPoints
comment17.target=void\ drawAPolygon(double[],\ double[],\ int)
comment18.params=x\ y
comment18.target=void\ drawAnImage(double,\ double)
comment18.text=\ \n\ Draws\ the\ current\ image\ between\ the\ mouse\ pressed\ and\ mouse\ released\ points.\n\ x\ and\ y\ are\ the\ position\ the\ mouse\ was\ released.\n\ Works\ out\ the\ left,\ top,\ width,\ and\ height\ from\ x,\ y,\ lastX\ and\ lastY\n\ Then\ draws\ the\ image,\ if\ there\ is\ one.\n
comment19.params=x\ y
comment19.target=void\ erase(double,\ double)
comment19.text=\n\ Erases\ a\ rectangular\ section.\ \n
comment2.params=
comment2.target=void\ doSetCurve()
comment20.params=arguments
comment20.target=void\ main(java.lang.String[])
comment3.params=
comment3.target=void\ doSetRect()
comment3.text=Respond\ to\ the\ Rect\ button
comment4.params=
comment4.target=void\ doSetOval()
comment4.text=Respond\ to\ the\ Oval\ button
comment5.params=
comment5.target=void\ doSetPoly()
comment6.params=
comment6.target=void\ doSetImage()
comment6.text=Respond\ to\ the\ Image\ button
comment7.params=
comment7.target=void\ doSetColour()
comment7.text=Respond\ to\ the\ Colour\ button
comment8.params=fillToggle
comment8.target=void\ doSetFillTest(double)
comment8.text=Respond\ to\ the\ Fill/Nofill\ button
comment9.params=lnW
comment9.target=void\ doSetLnW(double)
numComments=21
