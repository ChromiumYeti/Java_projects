#BlueJ class context
comment0.target=FilesDataExercise
comment0.text=\n\ Exercises\ for\ programs\ that\ read\ data\ from\ files.\n
comment1.params=
comment1.target=void\ sumNumbers()
comment1.text=\n\ sumNumbers\ should\ first\ use\ readAllNumbers\ to\ read\ the\ numbers\ from\ a\ \n\ \ file\ called\ "numbers.txt"\ into\ an\ ArrayList\n\ Then\ it\ should\ add\ up\ all\ the\ numbers,\ and\ print\ the\ total\ at\ the\ end.\n\ (The\ total\ should\ be\ 2174)\n
comment2.params=fname
comment2.target=java.util.ArrayList\ readAllNumbers(java.lang.String)
comment2.text=\n\ Utility\ method\:\ \n\ Reads\ a\ file\ consisting\ of\ numbers\ into\ a\ list\ of\ numbers.\n\ Returns\ the\ list\ of\ numbers\n
comment3.params=
comment3.target=void\ printLongestWord()
comment3.text=\n\ printLongestWord\ should\ first\ use\ readAllTokens\ to\ read\ the\ words\ from\ a\n\ \ file\ called\ "text.txt"\ into\ an\ ArrayList\ \n\ Then\ it\ should\ find\ the\ longest\ word\ and\ print\ it\ out.\n\ (The\ longest\ word\ should\ be\ "differentiated;")\n
comment4.params=fname
comment4.target=java.util.ArrayList\ readAllTokens(java.lang.String)
comment4.text=\n\ Utility\ method\:\ \n\ Read\ all\ the\ tokens\ in\ a\ file\ into\ a\ list\ of\ tokens.\n\ Returns\ the\ list\n
comment5.params=
comment5.target=void\ printFirstWords()
comment5.text=\n\ printFirstWords\ should\ first\ use\ readAllLines\ to\ read\ all\ the\ lines\ from\n\ \ a\ file\ called\ "text.txt"\ into\ an\ ArrayList\n\ Then\ it\ should\ print\ out\ the\ first\ token\ (word)\ on\ each\ line.\n\ It\ will\ need\ a\ Scanner\ on\ each\ line\ in\ order\ to\ extract\ the\ first\ word\n
comment6.params=fname
comment6.target=java.util.ArrayList\ readAllLines(java.lang.String)
comment6.text=\n\ Utility\ method\:\ \n\ Read\ each\ line\ in\ a\ file\ into\ a\ list\ of\ Strings\n\ Returns\ the\ list\n
comment7.params=
comment7.target=void\ countLargeCourses()
comment7.text=\n\ countLargeCourses\ should\ first\ use\ readAllLines\ to\ read\ all\ the\ lines\ from\n\ \ a\ file\ called\ "course-counts.txt"\ into\ an\ ArrayList\n\ Each\ line\ of\ "course-counts.txt"\ contains\ a\ course\ code\ (eg\ COMP102)\ and\ the\ number\ of\n\ \ students\ in\ the\ course\ \n\ Then\ it\ should\ count\ (and\ print\ out)\ how\ many\ of\ the\ courses\ have\n\ \ more\ than\ 100\ students\n\ It\ will\ need\ a\ Scanner\ on\ each\ line\ in\ order\ to\ extract\ the\ course\ code\ and\ course\ size.\n
comment8.params=
comment8.target=void\ computeTotalOrder()
comment8.text=\n\ computeTotalOrder\ should\ first\ use\ readAllLines\ to\ read\ all\ the\ lines\ from\n\ \ a\ file\ called\ "order.txt"\ into\ an\ ArrayList\n\ Each\ line\ of\ "order.txt"\ contains\ an\ item,\ a\ count,\ and\ a\ unit-price\n\ Then\ it\ should\ add\ up\ the\ total\ cost\ of\ the\ order.\n\ Note\:\ The\ cost\ of\ each\ item\ is\ the\ count\ *\ unit-price\n\ It\ will\ need\ a\ Scanner\ on\ each\ line\ in\ order\ to\ extract\ the\ count\ and\ unit-price\n
numComments=9
